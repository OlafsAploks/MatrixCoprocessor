LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.fixed_pkg.all;

use work.computing_elements_ports_pkg.all;

ENTITY InputController_vhd_tst IS
END InputController_vhd_tst;
ARCHITECTURE InputController_arch OF InputController_vhd_tst IS
-- constants
constant Clk_period : time := 10 ns;
-- signals
signal clk : std_logic := '0';
signal dataIN : SystolicArray_IN;
signal dataOUT : SystolicArray_OUT;
signal reset : STD_LOGIC;


COMPONENT InputController
	PORT (
    CLK: in STD_LOGIC;
		reset: in STD_LOGIC;
		input: in SystolicArray_IN;
    output: out SystolicArray_OUT
	);
END COMPONENT;
BEGIN

UUT : InputController PORT MAP (
  CLK => clk,
	reset => reset,
  input => dataIN,
  output => dataOUT
);

Clk_process : process
   begin
		clk <= '0';
		wait for Clk_period/2;
		clk <= '1';
		wait for Clk_period/2;
   end process Clk_process;


always : PROCESS
-- optional sensitivity list
-- (        )
-- variable declarations
BEGIN

--1
dataIN.column1.value <= "0000000000000000000000000000000100000000000000000000000000000000";
dataIN.column1.phase <= '0';
dataIN.column2.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column2.phase <= '0';
dataIN.column3.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column3.phase <= '0';
dataIN.column4.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column4.phase <= '0';
dataIN.column5.value <= "0000000000000000000000000000000110000000000000000000000000000000";
dataIN.column5.phase <= '0';
dataIN.column6.value <= "0000000000000000000000000000001000000000000000000000000000000000";
dataIN.column6.phase <= '0';
dataIN.column7.value <= "0000000000000000000000000000010000000000000000000000000000000000";
dataIN.column7.phase <= '0';
dataIN.column8.value <= "0000000000000000000000000000011000000000000000000000000000000000";
dataIN.column8.phase <= '0';
wait until rising_edge(clk);
--2
dataIN.column1.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column2.value <= "0000000000000000000000000000000100000000000000000000000000000000";
dataIN.column3.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column4.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000110010000000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000000111000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000101000000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000101100000000000000000000000000000000";
wait until rising_edge(clk);
--3
dataIN.column1.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column2.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column3.value <= "0000000000000000000000000000000100000000000000000000000000000000";
dataIN.column4.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000001100100000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000101010000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000000000000000000000000000000000000000";
wait until rising_edge(clk);
--4
dataIN.column1.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column2.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column3.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column4.value <= "0000000000000000000000000000000100000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000001000000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000111100000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000001000000000000000000000000000000000";
wait until rising_edge(clk);
--5
dataIN.column1.value <= "1111111111111111111111111111111100000000000000000000000000000000";
dataIN.column1.phase <= '1';
dataIN.column2.value <= "1111111111111111111111111111111000000000000000000000000000000000";
dataIN.column2.phase <= '1';
dataIN.column3.value <= "1111111111111111111111111111110100000000000000000000000000000000";
dataIN.column3.phase <= '1';
dataIN.column4.value <= "1111111111111111111111111111110000000000000000000000000000000000";
dataIN.column4.phase <= '1';
dataIN.column5.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column5.phase <= '1';
dataIN.column6.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column6.phase <= '1';
dataIN.column7.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column7.phase <= '1';
dataIN.column8.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column8.phase <= '1';
wait until rising_edge(clk);
--6
dataIN.column1.value <= "1111111111111111111111111111101100000000000000000000000000000000";
dataIN.column2.value <= "1111111111111111111111111111101000000000000000000000000000000000";
dataIN.column3.value <= "1111111111111111111111111111100100000000000000000000000000000000";
dataIN.column4.value <= "1111111111111111111111111111100000000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000000000000000000000000000000000000000";
wait until rising_edge(clk);
--7
dataIN.column1.value <= "1111111111111111111111111111011100000000000000000000000000000000";
dataIN.column2.value <= "1111111111111111111111111111011000000000000000000000000000000000";
dataIN.column3.value <= "1111111111111111111111111111010100000000000000000000000000000000";
dataIN.column4.value <= "1111111111111111111111111111010000000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000000000000000000000000000000000000000";
wait until rising_edge(clk);
--8
dataIN.column1.value <= "1111111111111111111111111111001100000000000000000000000000000000";
dataIN.column2.value <= "1111111111111111111111111111001000000000000000000000000000000000";
dataIN.column3.value <= "1111111111111111111111111111000100000000000000000000000000000000";
dataIN.column4.value <= "1111111111111111111111111111000000000000000000000000000000000000";
dataIN.column5.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column6.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column7.value <= "0000000000000000000000000000000000000000000000000000000000000000";
dataIN.column8.value <= "0000000000000000000000000000001000000000000000000000000000000000";
wait until rising_edge(clk);

WAIT;
END PROCESS always;
END InputController_arch;
